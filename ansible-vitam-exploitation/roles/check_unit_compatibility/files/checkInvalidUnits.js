// Load the schema
schema = JSON.parse(cat("archive-unit-schema.json"))

function normalizeSchema(schema) {
  // pas de $schema
  delete schema.$schema

  // démontage des définition
  const definitions = schema.definitions
  delete schema.definitions

  // renommage Management en _mgt
  schema.properties._mgt = schema.properties.Management
  delete schema.properties.Management

  schema.required = schema.required.map(name => {
    switch (name) {
      case "Management": return "_mgt"
      default: return name
    }
  })

  def_re = RegExp("#/definitions/(.*)")

  function resolveRef(schema) {
    if ("$ref" in schema) {
      ref = def_re.exec(schema.$ref)[1]
      def = definitions[ref]
      for (item in def) {
        schema[item] = def[item]
      }
      delete schema.$ref
    }

    if (schema.type == "integer") {
      delete schema.type
      schema.type = "number"
    }

    if (schema.format == 'date-time-vitam') {
      delete schema.format // les dates sont réputés correctes, il n'y a pas eu de changement
    }

    for (itemName in schema) {
      const item = schema[itemName]
      if (typeof item == "object") {
        resolveRef(item)
      }
    }
  }

  resolveRef(schema)
}

normalizeSchema(schema)

var result =
  db.Unit.find(  // TODO mettre ici le bon nom de base
    {
      $jsonSchema: { not: schema }
    },
    {
      _id: true, _tenant: true,
      Title: true
    }
  ).map(e => JSON.stringify(e))

print("Number of invalid Units: "+result.length)

print(result.join("\n"))