---

- name:           Ensure botocore and boto3 modules are installed
  pip:
    name:         [ "boto3", "botocore"]
    extra_args:   "--user"
  environment:
      http_proxy: "{{ http_proxy_environnement }}"
      https_proxy: "{{ http_proxy_environnement }}"
  when: http_proxy_environnement is defined and http_proxy_environnement != ""

- name:           Ensure botocore and boto3 modules are installed
  pip:
    name:         [ "boto3", "botocore"]
    extra_args:   "--user"
  when: http_proxy_environnement is not defined or http_proxy_environnement == ""

- name: List S3 Buckets
  aws_s3_bucket_facts:
    aws_access_key: "{{ vitam_offers[offer_conf]['s3AccessKey'] }}"
    aws_secret_key: "{{ vitam_offers[offer_conf]['s3SecretKey'] }}"
    ec2_url: "{{ vitam_offers[offer_conf]['s3Endpoint'] }}"
    region: "{{ vitam_offers[offer_conf]['s3RegionName'] }}"
  register: s3_buckets

- debug: var=s3_buckets

- name: Purge containers for s3
  aws_s3:
    bucket: "{{ item.name }}"
    mode: delete
    aws_access_key: "{{ vitam_offers[offer_conf]['s3AccessKey'] }}"
    aws_secret_key: "{{ vitam_offers[offer_conf]['s3SecretKey'] }}"
    s3_url: "{{ vitam_offers[offer_conf]['s3Endpoint'] }}"
    region: "{{ vitam_offers[offer_conf]['s3RegionName'] }}"
  with_items:
    - "{{ s3_buckets.ansible_facts.buckets }}"
  when: item.name | regex_search("{{ vitam_prefix_offer|default(vitam_site_name) }}.{{ vitam_tenant_ids }}.{{ containerRegExp }}", multiline=True, ignorecase=True)
